

velocities = []
times = []
accelerations = []
displacements = []

class Line:
    def __init__(self, gravitational_acceleration, initial_velocity, step_size, total_time, drag_coefficient, number):
        self.gravitational_acceleration = gravitational_acceleration
        self.initial_velocity = initial_velocity
        self.step_size = step_size
        self.total_time = total_time
        self.drag_coefficient = drag_coefficient
        self.number = number

    def find_data(self):
        velocities.append([])
        times.append([])
        accelerations.append([])
        displacements.append([])

        # Initial values
        velocities[self.number - 1].append(self.initial_velocity)
        displacements[self.number - 1].append(0)

        for i in range(int(self.total_time // self.step_size)):
            # Velocity calculations
            velocities[self.number - 1].append(
                velocities[self.number - 1][i] + self.step_size * (self.gravitational_acceleration - (self.drag_coefficient * velocities[self.number - 1][i]))
            )
            times[self.number - 1].append(i * self.step_size)
            accelerations[self.number - 1].append((velocities[self.number - 1][i + 1] - velocities[self.number - 1][i]) / self.step_size)

            # Displacement calculations
            new_displacement = displacements[self.number - 1][i] + velocities[self.number - 1][i] * self.step_size

            displacements[self.number - 1].append(new_displacement)

    def print_data(self):
        print(f"Data for Line {self.number}")
        print(f"{'Time (s)':<10} {'Velocity (m/s)':<15} {'Acceleration (m/s^2)':<20} {'Displacement (m)':<20}")
        print("-" * 80)

        for i in range(len(times[self.number - 1])):
            time = times[self.number - 1][i]
            velocity = velocities[self.number - 1][i]
            acceleration = accelerations[self.number - 1][i]
            displacement = displacements[self.number - 1][i]

            print(f"{round(time, 2):<10} {round(velocity, 2):<15} {round(acceleration, 2):<20} {round((displacement), 2):<20}")
        print("\n")


def main():
    grav, ix, iy = -9.8, 35.3553390593, 35.3553390593
    step_sizex, step_sizey, total_time, drag_coefficient = 0.1, 0.1, 10, (0.2/8.9)
    line1 = Line(grav, ix, step_sizex, total_time, drag_coefficient, 1)
    line2 = Line(0, iy, step_sizey, total_time, drag_coefficient, 2)
    line1.find_data()
    line2.find_data()
    line1.print_data()
    line2.print_data()
if __name__ == "__main__":
    main()
